@namespace NoBullshitTimer.Client.Pages

@page "/"

@using NoBullshitTimer.Client.Domain
@using NoBullshitTimer.Client.Components
@using NoBullshitTimer.Client.Framework
@using NoBullshitTimer.Client.UI
@implements IDisposable

@inject IJSRuntime JsRuntime


<PageTitle>Index</PageTitle>
<div class="dark:text-slate-100 p-12">
    <div class="max-lg:hidden pb-24 max-w-sm">
        <h1 class="text-2xl">NoBullshitTimer</h1>
        <p>An interval timer that just works*</p>
        <p>no ads, no subscription, no annoying UI, no unnecessary features, every device, open source and simply: <b>no bullshit</b></p>
        <br />
        <p>voice:
            <b>
                <select class="dark:bg-slate-800" @onchange="VoicePackChanged">
                    <option>default</option>
                    <option>sven</option>
                </select>
            </b>
        </p>
    </div>
    <div class="max-w-screen-sm mx-auto">
        <div class="flex flex-col items-center">
            <div class="pb-20">
                <div class="text-5xl text-center pb-4">
                    @_intervalTimer?.CurrentInterval.Name
                </div>
                @if (_intervalTimer?.NextInterval != null)
                {
                    <div class="text-2xl text-center">
                        Next: @_intervalTimer.NextInterval.Name
                    </div>
                }
            </div>

            <div class="pb-20">
                <div class="text-8xl text-center">@SecondsLeftFormatted()</div>
                @if (_intervalTimer?.CurrentInterval is Work or Rest)
                {
                    <div class="text-center">Exercise: @ExerciseProgress</div>
                    <div class="text-center">Set: @SetProgress</div>
                }
            </div>

            <div class="pb-20">
                <div class="text-center pb-5">@PauseInformation</div>
                <div class="flex flex-row gap-5">
                    <button class="border-2 p-2" @onclick="_ => _intervalTimer?.GoToPreviousInterval()"> Previous Interval</button>
                    <button class="border-2 p-2" @onclick="_ => _intervalTimer?.TogglePlayPause()">Play / Pause</button>
                    <button class="border-2 p-2" @onclick="_ => _intervalTimer?.GoToNextInterval()"> Next Interval </button>
                </div>
            </div>
        </div>
        <div class="pb-24">
            <h1 class="text-2xl pb-5">Edit</h1>
            <div class="flex justify-center">
                <div class="inline-grid grid-cols-[auto_auto_auto] gap-4">
                    <span class="flex items-center text-lg">Prepare Time</span>
                    <TextInput @bind-InputData="_prepareTimeInputRaw"/>
                    <span class="items-center">(@PrepareTimeInput)</span>

                    <span class="flex items-center text-lg">Work Time</span>
                    <TextInput @bind-InputData="_workTimeInputRaw"/>
                    <span>(@WorkTimeInput)</span>

                    <span class="flex items-center text-lg">Rest Time</span>
                    <TextInput @bind-InputData="_restTimeInputRaw"/>
                    <span>(@RestTimeInput)</span>

                    <span class="flex items-center text-lg">Cooldown Time</span>
                    <TextInput @bind-InputData="_cooldownTimeInputRaw"/>
                    <span>(@CooldownTimeInput)</span>

                    <span class="flex items-center text-lg">Intervals</span>
                    <TextInput @bind-InputData="_nrOfIntervalsInputRaw"/>
                    <span></span>

                    <span class="flex items-center text-lg">Total Time</span>
                    <span class="text-right">@TotalInputTime</span>
                    <span></span>
                </div>
            </div>
            <div class="grid grid-cols-[auto_1fr_1fr_minmax(100px,auto)] gap-4 pt-16">
                @foreach (var exerciseInput in _exerciseInputsRaw)
                {
                    <button class="border-2 p-2 mr-2 col-span-1" @onclick="_ => AddExercise(exerciseInput)">Add Exercise</button>
                    <span class="col-span-1 flex items-center text-lg">Exercise</span>
                    <div class="col-span-1">
                        <TextInput @bind-InputData="exerciseInput.Name"></TextInput>
                    </div>
                    <div class="col-span-1">
                        @if (_exerciseInputsRaw.Count > 1)
                        {
                            <button class="border-2 p-2" @onclick="_ => DeleteExercise(exerciseInput)">Delete Exercise</button>
                        }
                        else
                        {
                            <button class="border-2 p-2 text-gray-500 border-gray-500" disabled>Delete Exercise</button>
                        }
                    </div>
                }
            </div>
            <div class="flex flex-row justify-center pt-16">
                <button class="border-2 py-2 px-24 my-2" @onclick="Apply">
                    Apply
                </button>
            </div>
        </div>
        <p>
            *please note that this is an early version of this software, so certain things might <i>not</i> work perfectly. However, the core functionality is given and thoroughly tested
        </p>
    </div>
</div>

@code {
    private IntervalTimer? _intervalTimer;
    private AudioPlayer? _audioPlayer;


    protected override async Task OnInitializedAsync()
    {
        Apply();
    }


    public void Dispose()
    {
        _intervalTimer?.Dispose();
    }

    private void Apply()
    {
        var workoutPlan = new WorkoutPlan(
            PrepareTimeInput,
            WorkTimeInput,
            RestTimeInput,
            CooldownTimeInput,
            NrOfIntervalsInput,
            ExerciseInputs
        );
        if (!Validate(workoutPlan))
        {
            // display warning
            return;
        }
        Dispose();
        _audioPlayer = new AudioPlayer(
            async fileName => await JsRuntime.InvokeVoidAsync("playSound", $"/audio/{fileName}")
        );
        _intervalTimer = new IntervalTimer(workoutPlan, OnTimerTick);
    }

    private void OnTimerTick()
    {
        _audioPlayer?.PlaySoundIfNecessary(_intervalTimer);
        InvokeAsync(StateHasChanged);
    }

    private bool Validate(WorkoutPlan workoutPlan)
    {
        return true;
    }

    public string SecondsLeftFormatted()
    {
        if (_intervalTimer == null) return "";
        return TimeSpan.FromSeconds(_intervalTimer.SecondsLeft).ToString("mm\\:ss");
    }

    private void VoicePackChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            _audioPlayer.VoicePack = (string) e.Value;
        }
    }

    private string SetProgress
    {
        get
        {
            if (_intervalTimer == null) return "";
            var intervalsPerExercise = _intervalTimer.WorkoutPlan.SetsPerExercise * 2;
            var intervalInExercise = (_intervalTimer.CurrentIntervalNr - 2) % intervalsPerExercise;
            intervalInExercise = intervalInExercise == 0 ? intervalsPerExercise : intervalInExercise;
            intervalInExercise = (intervalInExercise + 1) / 2;
            return $"{(intervalInExercise)} / {_intervalTimer.WorkoutPlan.SetsPerExercise}";
        }
    }

    private string ExerciseProgress
    {
        get
        {
            if (_intervalTimer == null) return "";
            var intervalsPerExercise = _intervalTimer.WorkoutPlan.SetsPerExercise * 2;
            var intervalInWorkout = (_intervalTimer.CurrentIntervalNr - 2);
            var exercisesPerWorkout = _intervalTimer.WorkoutPlan.Exercises.Count;
            var exerciseInWorkout = (intervalInWorkout + intervalsPerExercise - 1) / intervalsPerExercise;
            return $"{exerciseInWorkout} / {exercisesPerWorkout}";
        }
    }


    public string PauseInformation
    {
        get
        {
            if (_intervalTimer == null) return "";
            return _intervalTimer.TimerPaused ? "Timer Paused" : "Timer Running";
        }
    }


    private TimeSpan PrepareTimeInput => TimeFormat.ParseTime(_prepareTimeInputRaw, 10);
    private TimeSpan WorkTimeInput => TimeFormat.ParseTime(_workTimeInputRaw, 40);
    private TimeSpan RestTimeInput => TimeFormat.ParseTime(_restTimeInputRaw, 20);
    private TimeSpan CooldownTimeInput => TimeFormat.ParseTime(_cooldownTimeInputRaw, 60);

    private int NrOfIntervalsInput
    {
        get
        {
            if (int.TryParse(_nrOfIntervalsInputRaw, out var nrOfIntervals))
                return nrOfIntervals;
            return 3;
        }
    }

    private string
        _prepareTimeInputRaw = "00:10",
        _workTimeInputRaw = "00:40",
        _restTimeInputRaw = "00:20",
        _cooldownTimeInputRaw = "01:00",
        _nrOfIntervalsInputRaw = "3";

    private string TotalInputTime => (
        PrepareTimeInput + ExerciseInputs.Count * NrOfIntervalsInput * (WorkTimeInput + RestTimeInput) + CooldownTimeInput
    ).ToString();



    private List<ExerciseInput> _exerciseInputsRaw = new() { new ExerciseInput ("Exercise 1") };

    private List<string> ExerciseInputs => _exerciseInputsRaw
        .Select(exerciseInput => exerciseInput.Name)
        .ToList();

    private void DeleteExercise(ExerciseInput exerciseInput)
    {
        _exerciseInputsRaw.Remove(exerciseInput);
        Console.WriteLine(_exerciseInputsRaw);
    }

    private void AddExercise(ExerciseInput exerciseInput)
    {
        var insertIndex = _exerciseInputsRaw.IndexOf(exerciseInput) + 1;
        _exerciseInputsRaw.Insert(insertIndex, new ExerciseInput ($"Exercise {insertIndex + 1}"));
        Console.WriteLine(_exerciseInputsRaw);
    }
}
