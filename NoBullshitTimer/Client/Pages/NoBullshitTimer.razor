@page "/"
@using global::NoBullshitTimer.Domain
@implements IDisposable


<PageTitle>Index</PageTitle>
<div class="text-slate-100 p-12">
    <div class="max-lg:hidden pb-24 max-w-sm">
        <h1 class="text-2xl">NoBullshitTimer</h1>
        <p>An interval timer that just works</p>
        <p>no ads, no subscription, no annoying UI, no unnecessary features, every device, open source and simply: <b>no bullshit</b></p>
    </div>
    <div class="flex flex-col justify-center items-center ">

        <div class="pb-20">
            <div class="text-3xl text-center">
                Current Exercise: @_intervalTimer.CurrentInterval.Name
            </div>
            <div class="text-lg text-center">
                Next Exercise: @_intervalTimer.NextInterval.Name
            </div>
        </div>

        <div class="pb-20">
            <div class="text-3xl text-center">@SecondsLeftFormatted()</div>
            @* <div class="text-center">@_intervalTimer.TimeInterval</div> *@
            <div class="text-center">Interval: @ProgressText</div>
        </div>

        <div class="pb-20">
            <div class="text-center pb-5">@PauseInformation</div>
            <div class="flex flex-row gap-5">
                <button class="border-2 p-2" @onclick="_intervalTimer.GoToPreviousInterval"> Previous Interval</button>
                <button class="border-2 p-2" @onclick="_intervalTimer.PlayPause">Play / Pause</button>
                <button class="border-2 p-2" @onclick="_intervalTimer.GoToNextInterval"> Next Interval </button>
            </div>
        </div>

        <h1 class="hidden">Edit</h1>
    </div>
</div>

@code {

    private Timer? _timer;
    private IntervalTimer _intervalTimer;

    public string SecondsLeftFormatted()
    {
        return TimeSpan.FromSeconds(_intervalTimer.SecondsLeft).ToString("mm\\:ss");
    }
    public string ProgressText => $"{(_intervalTimer.Interval)} / {_intervalTimer.TotalIntervals}";
    public string PauseInformation => _intervalTimer.TimerPaused ? "Timer Paused" : "Timer Running";
    public float Progress => (float) (_intervalTimer.Interval - 1) / _intervalTimer.TotalIntervals;

    protected override async Task OnInitializedAsync()
    {
        _intervalTimer = new IntervalTimer(5, 10, 5, 10, 3, ["push ups", "pull ups"]);

        _timer = new Timer(_ =>
        {
            _intervalTimer.Tick();
            InvokeAsync(StateHasChanged);
        }, null, 0L, 1000L);
    }

    public void Dispose()
    {
        _timer?.Dispose();
        _timer = null;
    }

}
