@using NoBullshitTimer.Client.Application
@using NoBullshitTimer.Client.Components
@using NoBullshitTimer.Client.Domain
@using NoBullshitTimer.Client.UI.Components.Generic
<div class="flex flex-col items-center">
    <div class="pb-20">
        <div class="text-5xl text-center pb-4">
            @Timer?.CurrentInterval?.Name
        </div>
        @if (Timer?.NextInterval != null)
        {
            <div class="text-2xl text-center">
                Next: @Timer.NextInterval.Name
            </div>
        }
    </div>

    <div class="pb-20">
        <div class="text-8xl text-center">@SecondsLeftFormatted()</div>
        @if (Timer?.CurrentInterval is Work or Rest)
        {
            <div class="text-center">Exercise: @ExerciseProgress</div>
            <div class="text-center">Set: @SetProgress</div>
        }
    </div>

    <div class="pb-20">
        <div class="text-center pb-5">@PauseInformation</div>
        <div class="flex flex-row gap-5">
            <Button OnClick="() => Timer?.GoToPreviousInterval()">
                <Icon Type="IconType.Previous" />
            </Button>
            <Button OnClick="() => Timer?.TogglePlayPause()">
                @if (Timer?.TimerPaused ?? false)
                {
                    <Icon Type="IconType.Play" />
                }
                else
                {
                    <Icon Type="IconType.Pause" />
                }
            </Button>
            <Button OnClick="() => Timer?.GoToNextInterval()">
                <Icon Type="IconType.Next" />
            </Button>
        </div>
    </div>
</div>

@inject IntervalTimer Timer
@inject IWorkoutStore WorkoutStore

@code {
    private Workout SelectedWorkout => WorkoutStore.SelectedWorkout;

    private string SecondsLeftFormatted()
    {
        if (Timer == null)
            return "";
        return TimeSpan.FromSeconds(Timer.SecondsLeft).ToString("mm\\:ss");
    }

    private string SetProgress
    {
        get
        {
            if (Timer == null)
                return "";
            var intervalsPerExercise = SelectedWorkout.SetsPerExercise * 2;
            var intervalInExercise = (Timer.CurrentIntervalNr - 2) % intervalsPerExercise;
            intervalInExercise = intervalInExercise == 0 ? intervalsPerExercise : intervalInExercise;
            intervalInExercise = (intervalInExercise + 1) / 2;
            return $"{(intervalInExercise)} / {SelectedWorkout.SetsPerExercise}";
        }
    }

    private string ExerciseProgress
    {
        get
        {
            if (Timer == null)
                return "";
            var intervalsPerExercise = SelectedWorkout.SetsPerExercise * 2;
            var intervalInWorkout = (Timer.CurrentIntervalNr - 2);
            var exercisesPerWorkout = SelectedWorkout.Exercises.Count;
            var exerciseInWorkout = (intervalInWorkout + intervalsPerExercise - 1) / intervalsPerExercise;
            return $"{exerciseInWorkout} / {exercisesPerWorkout}";
        }
    }

    private string PauseInformation
    {
        get
        {
            if (Timer == null)
                return "";
            return Timer.TimerPaused ? "Timer Paused" : "Timer Running";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Timer.OnTimerStateChanged += StateHasChanged;
    }
}