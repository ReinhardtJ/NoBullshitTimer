@using NoBullshitTimer.Client.Application
@using NoBullshitTimer.Client.Domain
@using NoBullshitTimer.Client.Components
@using NoBullshitTimer.Client.Repositories
@using NoBullshitTimer.Client.UI.Components.Generic

<div class="flex justify-center">
    <div class="inline-grid grid-cols-[auto_auto_auto] gap-4">

        <span class="flex items-center text-lg">Name</span>
        <TextInput Classes="text-right" @bind-InputData="_workoutForm.Name"/>
        <span></span>

        <span class="flex items-center text-lg">Circular Sets</span>
        <input type="checkbox" @bind="_workoutForm.CircularSets" class="w-5 h-5 self-center"/>
        <span></span>

        <span class="flex items-center text-lg">Prepare Time</span>
        <TextInput Classes="text-right" @bind-InputData="_workoutForm.PrepareTime"/>
        <span class="inline-flex items-center text-gray-500">(@WorkoutInEditing.PrepareTime)</span>

        <span class="flex items-center text-lg">Work Time</span>
        <TextInput Classes="text-right" @bind-InputData="_workoutForm.ExerciseTime"/>
        <span class="inline-flex items-center text-gray-500">(@WorkoutInEditing.ExerciseTime)</span>

        <span class="flex items-center text-lg">Rest Time</span>
        <TextInput Classes="text-right" @bind-InputData="_workoutForm.RestTime"/>
        <span class="inline-flex items-center text-gray-500">(@WorkoutInEditing.RestTime)</span>

        <span class="flex items-center text-lg">Cooldown Time</span>
        <TextInput Classes="text-right" @bind-InputData="_workoutForm.CooldownTime"/>
        <span class="inline-flex items-center text-gray-500">(@WorkoutInEditing.CooldownTime)</span>

        <span class="flex items-center text-lg">Intervals</span>
        <TextInput Classes="text-right" @bind-InputData="_workoutForm.SetsPerExercise"/>
        <span></span>

        <span class="flex items-center text-lg">Total Time</span>
        <span class="inline-flex items-center text-right">@TotalInputTime</span>
        <span></span>
    </div>
</div>
<div class="grid grid-cols-[auto_1fr_auto_auto_minmax(100px,auto)] gap-4 pt-16">
    @foreach (var exerciseInput in _workoutForm.Exercises)
    {
        <div class="col-span-1">
            <Button OnButtonClick="() => _workoutForm.AddExercise(exerciseInput)">
                <Icon Type="IconType.Add"/>
            </Button>
        </div>
        <div class="col-span-1 self-center">
            <TextInput @bind-InputData="exerciseInput.Name"></TextInput>
        </div>
        <div class="col-span-1">
            <Button
                OnButtonClick="() => _workoutForm.MoveExerciseUp(exerciseInput)"
                ButtonType="_workoutForm.IsFirstExercise(exerciseInput) ? ButtonType.Disabled : ButtonType.Primary">
                <Icon Type="IconType.Up"/>
            </Button>
        </div>
        <div class="col-span-1">
            <Button
                OnButtonClick="() => _workoutForm.MoveExerciseDown(exerciseInput)"
                ButtonType="_workoutForm.IsLastExercise(exerciseInput) ? ButtonType.Disabled : ButtonType.Primary">
                <Icon Type="IconType.Down"/>
            </Button>
        </div>
        <div class="col-span-1">
            @if (_workoutForm.Exercises.Count > 1)
            {
                <Button OnButtonClick="() => _workoutForm.DeleteExercise(exerciseInput)">
                    <Icon Type="IconType.X"/>
                </Button>
            }
            else
            {
                <Button ButtonType="ButtonType.Disabled">
                    <Icon Type="IconType.X"/>
                </Button>
            }
        </div>
    }
</div>
<div class="flex flex-row justify-center">
    <Button
        ButtonType="_workoutForm.Dirty ? ButtonType.Primary : ButtonType.Disabled"
        OnButtonClick="SaveChanges">
        Save Changes
    </Button>
</div>

@inject IntervalTimer Timer
@inject IWorkoutStore WorkoutStore
@inject IWorkoutRepository WorkoutRepository
@inject WorkoutMapper WorkoutMapper

@code {
    [Parameter] public EventCallback CloseWorkoutEditor { get; set; }

    private WorkoutForm _workoutForm = null!;
    private Workout WorkoutInEditing => WorkoutMapper.ToDomain(_workoutForm);
    private string _originalName = "";


    protected override void OnInitialized()
    {
        ApplyWorkoutToForm();
        WorkoutStore.OnWorkoutStoreStateChanged += ApplyWorkoutToForm;
    }


    private string TotalInputTime => (
        WorkoutInEditing.PrepareTime
        + WorkoutInEditing.Exercises.Count
        * WorkoutInEditing.SetsPerExercise
        * (WorkoutInEditing.ExerciseTime + WorkoutInEditing.RestTime)
        + WorkoutInEditing.CooldownTime
    ).ToString();


    private void SaveChanges()
    {
        var originalName = _originalName;
        var workout = WorkoutInEditing;
        var newName = workout.Name;
        WorkoutRepository.Delete(originalName);
        WorkoutRepository.Add(workout);
        WorkoutStore.SelectedWorkout = workout;
        _workoutForm.Dirty = false;
        _originalName = newName;
        CloseWorkoutEditor.InvokeAsync();
        StateHasChanged();
    }

    private void ApplyWorkoutToForm()
    {
        _workoutForm = WorkoutMapper.ToForm(WorkoutStore.SelectedWorkout);
        _workoutForm.OnFormChanged += StateHasChanged;
        _originalName = _workoutForm.Name;
        StateHasChanged();
    }
}