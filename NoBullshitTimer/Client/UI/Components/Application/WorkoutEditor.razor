@using NoBullshitTimer.Client.Application
@using NoBullshitTimer.Client.Domain
@using NoBullshitTimer.Client.Components
@using NoBullshitTimer.Client.UI.Components.Generic
<div class="pb-16">
    <h1 class="text-2xl pb-5">Edit</h1>
    <div class="flex justify-center">
        <div class="inline-grid grid-cols-[auto_auto_auto] gap-4">

            <span class="flex items-center text-lg">Circular Sets</span>
            <input type="checkbox" @bind="_workoutForm.CircularSets" class="w-5 h-5 self-center"/>
            <span></span>

            <span class="flex items-center text-lg">Prepare Time</span>
            <TextInput Classes="text-right" @bind-InputData="_workoutForm.PrepareTime"/>
            <span class="inline-flex items-center text-gray-500">(@EditableWorkout.PrepareTime)</span>

            <span class="flex items-center text-lg">Work Time</span>
            <TextInput Classes="text-right" @bind-InputData="_workoutForm.ExerciseTime"/>
            <span class="inline-flex items-center text-gray-500">(@EditableWorkout.ExerciseTime)</span>

            <span class="flex items-center text-lg">Rest Time</span>
            <TextInput Classes="text-right" @bind-InputData="_workoutForm.RestTime"/>
            <span class="inline-flex items-center text-gray-500">(@EditableWorkout.RestTime)</span>

            <span class="flex items-center text-lg">Cooldown Time</span>
            <TextInput Classes="text-right" @bind-InputData="_workoutForm.CooldownTime"/>
            <span class="inline-flex items-center text-gray-500">(@EditableWorkout.CooldownTime)</span>

            <span class="flex items-center text-lg">Intervals</span>
            <TextInput Classes="text-right" @bind-InputData="_workoutForm.SetsPerExercise"/>
            <span></span>

            <span class="flex items-center text-lg">Total Time</span>
            <span class="inline-flex items-center text-right">@TotalInputTime</span>
            <span></span>
        </div>
    </div>
    <div class="grid grid-cols-[auto_1fr_auto_auto_minmax(100px,auto)] gap-4 pt-16">
        @foreach (var exerciseInput in _workoutForm.Exercises)
        {
            <div class="col-span-1">
                <Button @onclick="_ => _workoutForm.AddExercise(exerciseInput)">
                    <Icon Type="IconType.Add" />
                </Button>
            </div>
            <div class="col-span-1 self-center">
                <TextInput @bind-InputData="exerciseInput.Name"></TextInput>
            </div>
            <div class="col-span-1">
                <Button
                    @onclick="_ => _workoutForm.MoveExerciseUp(exerciseInput)"
                    ButtonType="_workoutForm.IsFirstExercise(exerciseInput) ? ButtonType.Disabled : ButtonType.Primary"
                >
                    <Icon Type="IconType.Up" />
                </Button>
            </div>
            <div class="col-span-1">
                <Button
                    @onclick="_ => _workoutForm.MoveExerciseDown(exerciseInput)"
                    ButtonType="_workoutForm.IsLastExercise(exerciseInput) ? ButtonType.Disabled : ButtonType.Primary"
                >
                    <Icon Type="IconType.Down" />
                </Button>
            </div>
            <div class="col-span-1">
                @if (_workoutForm.Exercises.Count > 1)
                {
                    <Button @onclick="_ => _workoutForm.DeleteExercise(exerciseInput)">
                        <Icon Type="IconType.Close" />
                    </Button>
                }
                else
                {
                    <Button ButtonType="ButtonType.Disabled">
                        <Icon Type="IconType.Close" />
                    </Button>
                }
            </div>
        }
    </div>
    <div class="flex flex-row justify-center">
        <Button
            ButtonType="_workoutForm.Dirty ? ButtonType.Primary : ButtonType.Disabled"
            @onclick="ApplyCurrentInput"
        >
            Apply Changes
        </Button>
    </div>
</div>

@inject IntervalTimer Timer
@inject IWorkoutState WorkoutState
@inject WorkoutMapper WorkoutMapper

@code {
    private WorkoutForm _workoutForm = WorkoutForm.GetDefaultWorkoutForm();
    private Workout? EditableWorkout => WorkoutMapper.ToDomain(_workoutForm);


    private string TotalInputTime => (
        EditableWorkout.PrepareTime
        + EditableWorkout.Exercises.Count
        * EditableWorkout.SetsPerExercise
        * (EditableWorkout.ExerciseTime + EditableWorkout.RestTime)
        + EditableWorkout.CooldownTime
    ).ToString();


    public void ApplyCurrentInput()
    {
        WorkoutState.Workout = EditableWorkout;
        _workoutForm.Dirty = false;
    }

    protected override async Task OnInitializedAsync()
    {
        ApplyCurrentInput();
    }
}